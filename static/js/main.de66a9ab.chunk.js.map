{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["placeholder","Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","event","onTextChange","target","value","react_default","a","createElement","className","id","inputValue","onChange","rows","React","Component","Previewer","dangerouslySetInnerHTML","__html","markdown","style","minHeight","App","_this2","state","textInput","marked","handleTextChange","newInput","setState","App_Editor","App_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAIMA,SACJ,0RAEIC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFHA,4EAKNU,GACXP,KAAKJ,MAAMY,aAAaD,EAAME,OAAOC,wCAIrC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,YACEE,GAAG,SACHD,UAAU,eACVJ,MAAOV,KAAKJ,MAAMoB,WAClBC,SAAUjB,KAAKI,aACfc,KAAK,eAnBMC,IAAMC,WA0BrBC,cACJ,SAAAA,EAAYzB,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,GAAAvB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KACZJ,0EAIN,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,OACEE,GAAG,UACHO,wBAAyB,CAAEC,OAAQvB,KAAKJ,MAAM4B,UAC9CV,UAAU,yBACVW,MAAO,CACLC,UAAW,eAdCP,IAAMC,WAyDfO,cAlCb,SAAAA,EAAY/B,GAAO,IAAAgC,EAAA,OAAA9B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACjBC,EAAA9B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMJ,KACDiC,MAAQ,CACXC,UAAWpC,EACX8B,SAAUO,IAAOrC,IAEnBkC,EAAKI,iBAAmBJ,EAAKI,iBAAiB3B,KAAtBP,OAAAQ,EAAA,EAAAR,CAAA8B,IANPA,gFASFK,GACfjC,KAAKkC,SAAS,CACZJ,UAAWG,EACXT,SAAUO,IAAOE,sCAKnB,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,uBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACsB,EAAD,CACEnB,WAAYhB,KAAK6B,MAAMC,UACvBtB,aAAcR,KAAKgC,mBAErBrB,EAAAC,EAAAC,cAACuB,EAAD,CAAWZ,SAAUxB,KAAK6B,MAAML,oBA5BxBL,IAAMC,WC3CJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.de66a9ab.chunk.js","sourcesContent":["import React from \"react\";\nimport marked from \"marked\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst placeholder =\n  \"# H1 Header\\n## H2 Header\\n[A link](http://www.google.com)\\n`Inline code`\\n```\\nCode block\\n```\\n* List item\\n\\n> Blockquote\\n\\n![Cat photo](https://res.cloudinary.com/dphmoqr9f/image/upload/c_scale,w_200/v1560814963/FreeCodeCamp/Markdown%20Previewer/cat.jpg)\\n\\n**Strong text**\";\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onTextChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"col\">\n        <p>Enter markdown here:</p>\n        <textarea\n          id=\"editor\"\n          className=\"form-control\"\n          value={this.props.inputValue}\n          onChange={this.handleChange}\n          rows=\"10\"\n        />\n      </div>\n    );\n  }\n}\n\nclass Previewer extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"col\">\n        <p>Preview markdown here:</p>\n        <div\n          id=\"preview\"\n          dangerouslySetInnerHTML={{ __html: this.props.markdown }}\n          className=\"p-2 bg-dark text-light\"\n          style={{\n            minHeight: 250\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textInput: placeholder,\n      markdown: marked(placeholder)\n    };\n    this.handleTextChange = this.handleTextChange.bind(this);\n  }\n\n  handleTextChange(newInput) {\n    this.setState({\n      textInput: newInput,\n      markdown: marked(newInput)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container mb-5\">\n        <div className=\"row mb-4\">\n          <h1 className=\"mx-auto display-3\">Markdown Previewer</h1>\n        </div>\n        <div className=\"row\">\n          <Editor\n            inputValue={this.state.textInput}\n            onTextChange={this.handleTextChange}\n          />\n          <Previewer markdown={this.state.markdown} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}